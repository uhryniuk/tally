name: auto-release

on:
  schedule:
    - cron: '0 0 */14 * *'  # Runs every 14 days at midnight UTC
  workflow_dispatch:

jobs:
  create-tag-release:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: 
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - aarch64-apple-darwin
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu, x86_64-apple-darwin, aarch64-apple-darwin]
        include:
          # MacOS with arm64 needs a different runner architecture
          - os: macos-latest
            target: aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install cross for cross-compilation
      - name: Install cross
        run: |
          cargo install cross

      # Run cross build for each target
      - name: Cross compile
        run: |
          cross build --target ${{ matrix.target }} --release

      # Step 2: Calculate the next version tag
      - name: Calculate next tag
        id: tag_version
        run: |
          new_version=$(grep '^version = ' Cargo.toml | awk '{ print $3 }' | tr -d '"')
          echo "New version: $new_version"

          # Check if the tag already exists
          if git rev-parse "v$new_version" >/dev/null 2>&1; then
            echo "Tag v$new_version already exists. Exiting."
            exit 1
          fi

          # Set output for other steps
          echo "NEW_VERSION=v$new_version" >> $GITHUB_ENV
          echo "NEW_VERSION=v$new_version"
      
      # Step 3: Install Rust toolchain and required targets
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rust-src

      # Step 4: Install the target architectures
      - name: Install targets
        run: rustup target add ${{ matrix.target }}

      # Step 5: Build using cargo
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      # Step 6: Compress build output for each architecture
      - name: Compress artifacts
        run: |
          mkdir -p artifacts
          tar -czvf artifacts/${{ matrix.target }}-build_artifacts.tar.gz -C target/${{ matrix.target }}/release .

      # Step 7: Create the new tag
      - name: Create new tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag ${{ env.NEW_VERSION }}
          git push origin ${{ env.NEW_VERSION }}

      # Step 8: Upload the release artifacts for this architecture
      - name: Create GitHub Release and Upload Artifacts
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: "Release ${{ env.NEW_VERSION }}"
          body: "Automated release for version ${{ env.NEW_VERSION }}"
          draft: false
          prerelease: false
          files: artifacts/${{ matrix.target }}-build_artifacts.tar.gz

