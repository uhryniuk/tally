# Creates tag, release page and uploads release binary to it.
# TODO refactor this with other pipelines.
name: auto-release

on:
  schedule:
    - cron: '0 0 */14 * *'  # Runs every 14 days at midnight UTC
  workflow_dispatch:

jobs:
  create-tag-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Calculate the next version tag
      - name: Calculate next tag
        id: tag_version
        run: |
          # Fetch existing tags
          git fetch --tags

          # Get the latest tag and calculate the new version
          latest_tag=$(git describe --tags --abbrev=0)
          tag_version=${latest_tag:-"v0.0.0"}

          # Increment the patch version (you can adjust this to major/minor)
          new_version=$(echo $tag_version | awk -F. '{$NF+=1; OFS="."; print $0}')
          echo "New version: $new_version"

          # Set output for other steps
          echo "::set-output name=tag::$new_version"

      # Step 3: Build your project (replace with your build process)
      - name: Build the project
        run: |
          # Example build steps (adjust based on your project)
          # For example, for Rust:
          cargo build --release

      # Step 4: Compress build output (optional)
      - name: Compress artifacts
        run: |
          tar -czvf build_artifacts.tar.gz ./target/release/

      # Step 5: Create the new tag
      - name: Create new tag
        run: |
          git tag ${{ steps.tag_version.outputs.tag }}
          git push origin ${{ steps.tag_version.outputs.tag }}

      # Step 6: Upload the release assets (artifacts)
      - name: Create GitHub Release and Upload Artifacts
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.tag }}
          release_name: "Release ${{ steps.tag_version.outputs.tag }}"
          body: "Automated release for version ${{ steps.tag_version.outputs.tag }}"
          draft: false
          prerelease: false
          files: build_artifacts.tar.gz  # Upload the compressed build artifacts
